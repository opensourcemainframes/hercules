----------------------------------------------------------------
  HOW TO BUILD HERCULES FOR WINDOWS WITH MICROSOFT VISUAL C
----------------------------------------------------------------

This file gives some hints on how you can build Hercules for
the Microsoft Windows environment using the Visual C/C++
compiler, without the need for Cygwin or Mingw.


         SETTING UP THE ENVIRONMENT VARIABLES

Run this .cmd file to set the PATH, INCLUDE, and LIB variables:

@echo off
path=%MSSdk%\bin\Win64;%PATH%
Call "%VCToolkitInstallDir%vcvars32.bat"
Call "%MSSdk%\setenv" /XP32 /RETAIL

Additional Note regarding environment variables: if you are using the
makefile.bat && makefile-dllmod.msvc to build Herc (see further below)
you may also wish to define the ZLIB_DIR and BZIP2_DIR variables in
order for Herc to support ZLIB && BZIP2 disk/tape compression. See also
the "Note Regarding ZLIB_DIR" and "Obtaining ZLIB" sections further
below (as well as the ones for BZIP2) for further information regarding
building Herc with compression support.


                    THE BUILD COMMAND

You can choose between three versions of Hercules: the statically
linked version, the base DLL version, or the DLL version with loadable
module support. The statically linked and base DLL versions are
functionally identical, but the executable files of the base DLL
version occupy less space than those of the statically linked version.
The DLL version with loadable module support is required if you want
to use Fish's HercGUI. To build either of the DLL versions you need an
additional software component called msvcrt.lib (see below).

To build the statically-linked version of Hercules:

nmake /f makefile.msvc

The executable modules are placed in the msvc.bin subdirectory.

To build the base DLL version of Hercules:

nmake /f makefile-dll.msvc

The executable modules are placed in the msvc.dll.bin subdirectory.

To build the DLL version with loadable module support:

nmake /f makefile-dllmod.msvc

The executable modules are placed in the msvc.dllmod.bin subdirectory.


     DOWNLOAD THE MICROSOFT VISUAL C++ COMPILER AND SDK

http://msdn.microsoft.com/visualc/vctoolkit2003/

The Microsoft Visual C++ Toolkit 2003 includes the command line
versions of the Visual C/C++ compiler and linker, as well as the
standard C/C++ Library.

http://www.microsoft.com/msdownload/platformsdk/sdkupdate/

The Windows Server 2003 Core SDK contains the include files and
libraries needed to create applications for Win95/98/ME/NT/2000/XP.

Notes:
1. You may need to add "download.microsoft.com" to the Internet
   Explorer trusted zone before you can install the SDK
2. You also need to download "Build Environment Intel 64 bit" to
   obtain the nmake utility in mssdk/bin/win64


           HOW TO OBTAIN THE MSVCRT.LIB FILE

If you want to build the DLL version of Hercules then you will
also need the Microsoft file msvcrt.lib which is not included in
the free Visual C++ Toolkit 2003. You can however obtain this
file by downloading and installing the
".NET Framework Version  1.1 Software Development Kit (SDK)"
which is available as a free download from:

http://msdn.microsoft.com/netframework/downloads/updates/default.aspx

Be aware, however, that this is a 108MB download, of which the only
directory you need is
c:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib
After installation, copy msvcrt.lib from this directory to
c:\Program Files\Microsoft Visual C++ Toolkit 2003\lib
You may also want to copy nmake.exe and msvcr71.dll from
C:\Program Files\Microsoft.NET\v1.1\Bin
after which you can delete the .NET Framework SDK.


               GCC EXTENSIONS TO BE AVOIDED

1. Variadic macro definitions, eg #define logmsg(format,parms...)
2. __attribute__((unused)) should be replaced by UNREFERENCED macro
3. void* pointer arithmetic, eg (void*)p + 1
4. __attribute__((packed))


               C99 EXTENSIONS TO BE AVOIDED

1. Field names in structure initialisers.

--rbowler

==============================================================================

How to build Hercules using Visual Studio IDE:


  A default makefile Visual Studio .dsw workspace file and .dsp project file
  are included as part of the Hercules distribution now. Open the workspace
  in Developer Studio and simply click build or buildall. It's that simple.

  The default makefile project simply invokes makefile.bat which in turn just
  invokes nmake for makefile.msvc (after calling a few key bat files to setup
  the build environment).

  Note that we're presuming here that you've already installed the Visual C++
  Toolkit 2003. If you haven't, then none of this will work right; you'll get
  a bunch of build errors. You need their latest compiler as Roger explained
  furher above at the beginning of this document.

==============================================================================

                            C/C++ COMPILER OPTIONS

  Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 13.10.3077 for 80x86
  Copyright (C) Microsoft Corporation 1984-2002. All rights reserved.

                                -OPTIMIZATION-

  /O1 minimize space                       /Op[-] improve floating-pt consistency
  /O2 maximize speed                       /Os favor code space
  /Oa assume no aliasing                   /Ot favor code speed
  /Ob<n> inline expansion (default n=0)    /Ow assume cross-function aliasing
  /Od disable optimizations (default)      /Ox maximum opts. (/Ogityb2 /Gs)
  /Og enable global optimization           /Oy[-] enable frame pointer omission
  /Oi enable intrinsic functions

                               -CODE GENERATION-

  /G3 optimize for 80386                   /Gh enable _penter function call
  /G4 optimize for 80486                   /GH enable _pexit function call
  /G5 optimize for Pentium                 /GR[-] enable C++ RTTI
  /G6 optimize for PPro, P-II, P-III       /GX[-] enable C++ EH (same as /EHsc)
  /G7 optimize for Pentium 4 or Athlon     /EHs enable C++ EH (no SEH exceptions)
  /GB optimize for blended model (default) /EHa enable C++ EH (w/ SEH exceptions)
  /Gd __cdecl calling convention           /EHc extern "C" defaults to nothrow
  /Gr __fastcall calling convention        /GT generate fiber-safe TLS accesses
  /Gz __stdcall calling convention         /Gm[-] enable minimal rebuild
  /GA optimize for Windows Application     /GL[-] enable link-time code generation
  /Gf enable string pooling                /QIfdiv[-] enable Pentium FDIV fix
  /GF enable read-only string pooling      /QI0f[-] enable Pentium 0x0f fix
  /Gy separate functions for linker        /QIfist[-] use FIST instead of ftol()
  /GZ Enable stack checks (/RTCs)          /RTC1 Enable fast checks (/RTCsu)
  /Ge force stack checking for all funcs   /RTCc Convert to smaller type checks
  /Gs[num] control stack checking calls    /RTCs Stack Frame runtime checking
  /GS enable security checks               /RTCu Uninitialized local usage checks
  /clr[:noAssembly] compile for the common language runtime
      noAssembly - do not produce an assembly
  /arch:<SSE|SSE2> minimum CPU architecture requirements, one of:
      SSE - enable use of instructions available with SSE enabled CPUs
      SSE2 - enable use of instructions available with SSE2 enabled CPUs

                                -OUTPUT FILES-

  /Fa[file] name assembly listing file     /Fo<file> name object file
  /FA[sc] configure assembly listing       /Fp<file> name precompiled header file
  /Fd[file] name .PDB file                 /Fr[file] name source browser file
  /Fe<file> name executable file           /FR[file] name extended .SBR file
  /Fm[file] name map file

                                -PREPROCESSOR-

  /AI<dir> add to assembly search path     /Fx merge injected code to file
  /FU<file> forced using assembly/module   /FI<file> name forced include file
  /C don't strip comments                  /U<name> remove predefined macro
  /D<name>{=|#}<text> define macro         /u remove all predefined macros
  /E preprocess to stdout                  /I<dir> add to include search path
  /EP preprocess to stdout, no #line       /X ignore "standard places"
  /P preprocess to file

                                  -LANGUAGE-

  /Zi enable debugging information         /Ze enable extensions (default)
  /ZI enable Edit and Continue debug info  /Zl omit default library name in .OBJ
  /Z7 enable old-style debug info          /Zg generate function prototypes
  /Zd line number debugging info only      /Zs syntax check only
  /Zp[n] pack structs on n-byte boundary   /vd{0|1} disable/enable vtordisp
  /Za disable extensions (implies /Op)     /vm<x> type of pointers to members
  /Zc:arg1[,arg2] C++ language conformance, where arguments can be:
      forScope - enforce Standard C++ for scoping rules
      wchar_t - wchar_t is the native type, not a typedef

                                -MISCELLANEOUS-

  @<file> options response file            /wo<n> issue warning n once
  /?, /help print this help message        /w<l><n> set warning level 1-4 for n
  /c compile only, no link                 /W<n> set warning level (default n=1)
  /H<num> max external name length         /Wall enable all warnings
  /J default char type is unsigned         /Wp64 enable 64 bit porting warnings
  /nologo suppress copyright message       /WX treat warnings as errors
  /showIncludes show include file names    /WL enable one line diagnostics
  /Tc<source file> compile file as .c      /Yc[file] create .PCH file
  /Tp<source file> compile file as .cpp    /Yd put debug info in every .OBJ
  /TC compile all files as .c              /Yl[sym] inject .PCH ref for debug lib
  /TP compile all files as .cpp            /Yu[file] use .PCH file
  /V<string> set version string            /YX[file] automatic .PCH
  /w disable all warnings                  /Y- disable all PCH options
  /wd<n> disable warning n                 /Zm<n> max memory alloc (% of default)
  /we<n> treat warning n as an error

                                   -LINKING-

  /MD link with MSVCRT.LIB                 /MDd link with MSVCRTD.LIB debug lib
  /ML link with LIBC.LIB                   /MLd link with LIBCD.LIB debug lib
  /MT link with LIBCMT.LIB                 /MTd link with LIBCMTD.LIB debug lib
  /LD Create .DLL                          /F<num> set stack size
  /LDd Create .DLL debug library           /link [linker options and libraries]

==============================================================================

             *** NOTE REGARDING PRECOMPILED HEADERS ***

EACH AND EVERY source file must start with :

   #include "hstdinc.h"

These contain the system headers (those enclosed in <>) and that are not
dependent on the guest architecture.

This file, along with build_pch.c allows building a precompiled header file
that significantly speeds up the MSVC Windows build.

I REPEAT !!

EACH AND EVERY SOURCE FILE MUST START WITH THIS FILE !!

No macros (#define).. No nothing.

--Ivan

                *** NOTE REGARDING ZLIB_DIR ***

ZLIB_DIR defines the location of the ZLIB libraries
If ZLIB_DIR is undefined, then an attempt is made to locate the ZLIB
library in winbuild\zlib\win32_32
If ZLIB_DIR contains a bad path, nmake exits with an error EXCEPT if
ZLIB_DIR is set to the special keyword "NONE".
ZLIB_DIR should contain the *BASE* path for ZLIB. That means that
the following files are expected :

- $(ZLIB_DIR)\zlib1.dll
- $(ZLIB_DIR)\lib\zdll.lib
- $(ZLIB_DIR)\include\zlib.h
- $(ZLIB_DIR)\include\zconf.h

REMEMBER TO "nmake clean" if the build type is changed, the ZLIB location
modified, etc..

NOTE : The zlib1.dll Dynamic Link Library will be copied to the appropriate
build target directory as part of the build process in order to ensure that
the DLL is obtainable by the platform PE(*) loader at run time.

--Ivan

(*) PE stands for Program Executable and designates WIndows .EXE & .DLL
executable file formats.

                     *** Obtaining ZLIB ***

Building from the distributed hercules source tree does not by default
incorporate ZLIB as a compression mechanism, since

1) ZLIB is an external project, completelly separate from the hercules
   project itself.
2) MS Windows (tm) does not provide any well known location (if at all) for
   the ZLIB library runtime and/or header files.

.. Therefore ..

In order for HERCULES to be built with ZLIB support (DASD, TAPE), go
to http://www.zlib.net - and locate the download for the 'zlib compiled DLL'.
NOTE : This is a 75KB download.
Extract that ZIP file to the winbuild\zlib\win32_32 directory, relative to
the source directory.
You may extract the file to an alternate location, and then set the ZLIB_DIR
environment variable accordingly (as explained above).

The hercules project is currently known to succesfully build with
version 1.2.2 (current at the time of writing) of the ZLIB compression library.

ZLIB is a compression algorithm written by Jean Loup Gailly and Mark Adler.
ZLIB is used in the hercules project pursuant to the ZLIB License
(http://www.zlib.net/zlib_license.html).

In source form, the hercules project DOES NOT contain ZLIB.
In Binary form, the hercules project MAY contain an UNMODIFIED version of
    the ZLIB runtime.

--Ivan

                *** NOTE REGARDING BZIP2_DIR ***

BZIP2_DIR defines the location of the BZIP2 libraries. If BZIP2_DIR is undefined,
If BZIP2_DIR contains a bad path, nmake exits with an error EXCEPT if BZIP2_DIR
is set to the special keyword "NONE". BZIP2_DIR should contain the *BASE* path for
BZIP2. That means that the following files are expected:

  -  $(BZIP2_DIR)\bzlib.h
  -  $(BZIP2_DIR)\libbz2.lib
  -  $(BZIP2_DIR)\libbz2.dll

REMEMBER TO "nmake clean" if the build type is changed, the BZIP2_DIR location
modified, etc..

NOTE : The libbz2.dll Dynamic Link Library will be copied to the appropriate
build target directory as part of the build process in order to ensure that
the DLL is obtainable by the platform PE(*) loader at run time.

-- Fish

(*) PE stands for Program Executable and designates WIndows .EXE & .DLL
executable file formats.

                     *** Obtaining BZIP2 ***

Building from the distributed Hercules source tree does not by default
incorporate BZIP2 as a compression mechanism, since

1) BZIP2 is an external project, completelly separate from the Hercules
   project itself.
2) MS Windows (tm) does not provide any well known location (if at all) for
   the BZIP2 library runtime and/or header files.

.. Therefore ..

In order for HERCULES to be built with BZIP2 support (DASD, TAPE), go to
"http://sources.redhat.com/bzip2/" and locate the hyperlink entitled: "Here's
the source code, including full documentation" in the "Getting the latest
version - bzip2-1.0.2 (released 26 Jan 2002)" section. (Yep, that's right!
You're going to have to build the BZIP2 dll for yourself from source!) (either
that or obtain a pre-built copy of it (and associated header/lib files) from
someone else you trust). NOTE: This is a 650KB download, and the file is in
tar.gz format, so you'll need WinZip or other utility to unzip it.

Extract the files to a directory of your choosing and build the DLL using
the supplied makefile.msc. Once it's built, then copy the resulting DLL, lib,
and bzip2.h header file to your defined BZIP2_DIR location and rebuild Herc.

BZIP2 is a compression algorithm written by Julian R Seward and is used in
Hercules pursuant to the BZIP2 LICENSE (distributed with its source code).

In source form, the Hercules project DOES NOT contain BZIP2.
In Binary form, the Hercules project MAY contain an UNMODIFIED version of the
BZIP2 runtime (DLL).

-- Fish

***********************************************************************

             ((  U N R E S O L V E D    I S S U E S  ))

                       ((( ** TO DO ** )))

                    (in no particular order)


  We still have some shutdown synchronization issues. I'll try to
eventually design something to try and address it, but for now it'll
have to wait until later.


  HercGUI/Hercules: CPU utilization too high. All indications are that
this is simply due to the inefficient design of dyngui.c <--> HercGUI
communication (it's the constant device status updates that's causing
it). dyngui.c was reworked to be slightly more efficient wrt reporting
device status back to the GUI, but only works with a version of the
GUI that knows how to request dyngui to use the newer device status
reporting technique. (Note: I've already made the necessary changes to
the existing GUI and will release it at the same time as the new Herc.)


  Add  **>> ALL NEW SOURCE FILES <<**  to makefile.am
(Ivan? Did you do this already??)


  We should review the "makefile.w32" and "makefile.generic"
files to make sure they're still current (or possibly delete
the "makefile.w32" file altogether now that we have an MSVC
port).


  MUST CONTINUE TO BUILD CORRECTLY FOR/ON NON-WIN32 PLATFORMS!
Each change to the build environment (and to Herc too!) should involve
a test build of all the other supported platforms (linux, apple, etc)
to make sure they continue to build properly too.


  nls (National Language Support): Windows supports it and I know how to
do it, but I just haven't sat down and figured out what needs to be done
to get us there, that's all. <shrug>


  Maybe move hscutl2 into w32util and get rid of of hscutl2?? (it's just
a thought and purely optional; just thought I'd mention it)


--------------------------------------------------------------
TESTING TESTING TESTING TESTING TESTING TESTING TESTING TESTING

 - get Wayne (aka "somitcw") to test more than 16 connected TN3270 sessions...

 - all utilities: (I suspect they'll all work just fine, but I'm
                  listing them here individually for thoroughness)
      - cckdcdsk
      - cckdcomp
      - cckddiag
      - cckdfix
      - cckdswap
      - dasdcat
      - dasdconv
      - dasdcopy
      - dasdinit   works fine
      - dasdisup
      - dasdload
      - dasdls
      - dasdpdsu
      - dasdseq
      - dmap2hrc
      - hercifc
      - herclin
      - hetget
      - hetinit
      - hetmap
      - hetupd
      - tapecopy
      - tapemap
      - tapesplt


***********************************************************************

MSVC AND CRYPTO

Bernard Van Der Helm's crypto modules (Message Security Assist 1 & 2 Feature)
is now built automatically as part of the MSVC build.

Should it be necessary to build a version *WITHOUT* the crypto DLL, it is
possible to instruct the makefile-dllmod.msvc file to bypass building that
particular code by defining the environment variable NOCRYPTO.

Also note that the module is only built in the DLL/Modules version. It
is not built as part of the DLL and Static versions (because dyncrypt.c
is module-only code).

Nov 22nd 2005

--Ivan Warren

***********************************************************************
