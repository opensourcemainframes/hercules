# ***************************************************************************
# MAKEFILE.MSVC (c) Copyright Roger Bowler, 2005
# Build Hercules for Win32 using MSVC and nmake (static link version)
#
# This file and the executable program(s) generated from it are
# subject to the terms of the Hercules Public Licence Version 2
#
# dd/mm/yy Created by - R.Bowler
# dd/mm/yy Place debug/retail builds into separate directories - Fish
# 08/03/05 Added /QIfist to cflags - JJ
# 08/03/05 Modified to do "batch build" for faster builds - Fish
# 08/03/05 Fixed optimization flags - Fish
# 08/03/05 Added support for DEBUG builds - Fish
# 08/03/05 Use XCOPY instead of COPY - Fish
# 10/03/05 Fixed creation of directories - R.Bowler
# 11/03/05 Use ZLIB_DIR environment variable - Ivan Warren
# 13/03/05 Place MAP files in separate directory - R.Bowler
# 06/05/05 Add scsitape, w32stape, user32.lib and remove w32ftol2 - R.Bowler
# 06/05/05 Can we agree on these o/p directory names?? - Fish
# 14/11/05 Bring up-to-date; make similar to dll/dllmod versions. - Fish
# ***************************************************************************

!IFNDEF VERSION

#   >>>  Jay!  <<<  Be sure to change the below V1/V2/V3/V4 values to match!

VERSION = \"3.03_msvc\"

# The below VERSION digits values SHOULD match the ABOVE VERSION number.
#
# Windows uses 4-digit version numbers: V1.V2.V3.V4. The first three are
# your standard major/intermediate/minor version level, and the last digit
# is the "build number". Normally your basic "version number" value (major
# intermediate, minor) is maintained manually, whereas the "build number"
# is automatically incremented each time you do a build. Thus the "build
# number" provides for a guaranteed unique "version#" which may not always
# be the case when you don't change the major/inter/minor values (or forget
# to do so) during development and/or fix releases.
#
# I plan to try and "automate" the incrementing of the "build count" value
# (actually it's ALREADY automated on my own system), but it can remain 0
# for now since at the moment we only support the major/inter/minor scheme.

V1 = 3
V2 = 0
V3 = 3
V4 = 0

!ENDIF

APPVER   = 4.0
TARGETOS = BOTH

# ---------------------------------------------------------------------
# To enable ZLIB compression, first make sure you have the ZLIB dll
# installed on your system (downloadable from http://www.zlib.net),
# and then define an environment variable called "ZLIB_DIR" that
# specifies the full path to the directory where it is installed.
# (via the "Advanced" tab of the Control Panel 'System' applet).
#
# Note that the directory you specify should: a) hold the zlib1.dll
# itself, b) contain two sub-directories called 'include' and 'lib'
# where the 'zlib.h', zconf.h' and 'zdll.lib', etc, files reside.
#
# Note: if the path contains blanks, do NOT surround it with quotes!
# The makefile will do that if it needs to. Just define the variable
# with the path as-is. E.g.:
#
# ZLIB_DIR = E:\MyProjects\zlib and bzip2 dlls\zlib latest\zlib122-dll
# ZLIB_DIR = C:\winbuild\zlib\win32_32
# ---------------------------------------------------------------------

# ISW 20050311
# If winbuild\zlib\win32_32 exists (relative to current dir)
# then use it for ZLIB_DIR *UNLESS* ZLIB_DIR is already set.
#
# If ZLIB_DIR is improperly set, issue a message and exit *UNLESS*
# it is set to the word "NONE"
#
# DBT 20050312
# Minor changes to support paths with blanks in them.

!IFNDEF ZLIB_DIR

!IF EXIST(winbuild\zlib\win32_32\include\zlib.h)
ZLIB_DIR = winbuild\zlib\win32_32
!MESSAGE ZLIB_DIR not set. "$(ZLIB_DIR)" implied and checked
!ENDIF

!ELSE

!IF "$(ZLIB_DIR)" == "NONE"
!UNDEF ZLIB_DIR
!ELSEIF !EXIST("$(ZLIB_DIR)\include\zlib.h")
!ERROR ZLIB_DIR "$(ZLIB_DIR)\include\zlib.h" does not exist. Check ZLIB_DIR
!ENDIF

!ENDIF

# ---------------------------------------------------------------------
# To enable BZIP2 compression, first make sure you have the libbz2.dll
# installed on your system (from: http://sources.redhat.com/bzip2/),
# and then define an environment variable called "BZIP2_DIR" that
# specifies the full path to the directory where it is installed.
# (via the "Advanced" tab of the Control Panel 'System' applet).
#
# Note that the directory you specify should contain the libbz2.dll as
# well as the 'bzlib.h' header file and the 'libbz2.lib' link library.
#
# Note: if the path contains blanks, do NOT surround it with quotes!
# The makefile will do that if it needs to. Just define the variable
# with the path as-is. E.g.:
#
# BZIP2_DIR = E:\MyProjects\bzip2
# ---------------------------------------------------------------------

!IFDEF BZIP2_DIR

!IF "$(BZIP2_DIR)" == "NONE"
!UNDEF BZIP2_DIR
!ELSEIF !EXIST("$(BZIP2_DIR)\bzlib.h")
!ERROR BZIP2_DIR "$(BZIP2_DIR)\bzlib.h" does not exist. Check BZIP2_DIR
!ELSEIF !EXIST("$(BZIP2_DIR)\libbz2.lib")
!ERROR BZIP2_DIR "$(BZIP2_DIR)\libbz2.lib" does not exist. Check BZIP2_DIR
!ELSEIF !EXIST("$(BZIP2_DIR)\libbz2.dll")
!ERROR BZIP2_DIR "$(BZIP2_DIR)\libbz2.dll" does not exist. Check BZIP2_DIR
!ENDIF

!ENDIF

# -------------------------------------------------
# NOTE! must set the 'NODEBUG' variable properly
#       BEFORE calling win32.mak since it uses it.
# -------------------------------------------------

!IFNDEF CFG
NODEBUG = 1
!ELSEIF  "$(CFG)" == "DEBUG"
!UNDEF NODEBUG
!ELSEIF  "$(CFG)" == "RETAIL"
NODEBUG = 1
!ELSE
!ERROR Invalid build configuration!
!ENDIF

!include <win32.mak>

# -------------------------------------------------
# NOTE! must set our prefered 'cdebug' value(s)
#       AFTER calling win32.mak since it sets it.
# -------------------------------------------------

# Define o/p directories (if not already pre-defined)...

!IF ("$(EXEDIR)" == "") || ("$(OBJDIR)" == "") || ("$(PDBDIR)" == "") || ("$(MAPDIR)" == "")
!IFDEF NODEBUG
EXEDIR  = msvc.bin
OBJDIR  = msvc.obj
PDBDIR  = msvc.pdb
MAPDIR  = msvc.map
!ELSE
EXEDIR  = msvc.debug.bin
OBJDIR  = msvc.debug.obj
PDBDIR  = msvc.debug.pdb
MAPDIR  = msvc.debug.map
!ENDIF
!ENDIF

!IFDEF VS70COMNTOOLS
MAPFILE = /map:$(MAPDIR)\$(@B).map /mapinfo:lines
!ELSE
MAPFILE = /map:$(MAPDIR)\$(@B).map
!ENDIF

!IFDEF NODEBUG
# -------------------------------
# RETAIL: full optimization
# -------------------------------

# Fish: Not sure how to check within a makefile for which version
# of the compiler is going to be used so for now, we'll hard code
# the test for VS 7.0's compiler (version 13.00) which still supports
# the /QIfist option (whereas the newer VS 8.0 compiler (vers 14.00)
# kicks out the warning: "D9035 option 'QIfist' has been deprecated
# and will be removed in a future release"). Their documentation
# says to use the new /fp option instead.

!IFDEF VS70COMNTOOLS

cflags = $(cflags) /QIfist

# PROGRAMMING NOTE: we're purposely discarding win32.mak's $(cdebug) settings
# and replacing them with our own by leaving "$(cdebug)" out of the statement

cdebug  = /O2 /DNDEBUG
ldebug = $(ldebug)

!ELSEIFDEF VS80COMNTOOLS

# PROGRAMMING NOTE: we're purposely discarding win32.mak's $(cdebug) settings
# and replacing them with our own by leaving "$(cdebug)" out of the statement

cdebug = /O2 /GL /DNDEBUG
ldebug = $(ldebug) /LTCG

# Create .PDB (Program Database) files for debugging for 'Release' builds too!
# (so we can easily analyze "MiniDump" crash dumps should Herc ever crash)

cdebug = $(cdebug) /Zi /Gm
ldebug = $(ldebug) /DEBUG /PDB:$(PDBDIR)\$(@B).pdb

!ENDIF

!ELSE
# -------------------------------
# DEBUG: no optimizations at all
# -------------------------------

# PROGRAMMING NOTE: we're purposely discarding win32.mak's $(cdebug) settings
# and replacing them with our own by leaving "$(cdebug)" out of the statement

cdebug  = -Zi -Od -DDEBUG -D_DEBUG -Gm
ldebug = /DEBUG /PDB:$(PDBDIR)\$(@B).pdb

!ENDIF

!IFDEF VS80COMNTOOLS
cflags = $(cflags) -D_CRT_SECURE_NO_DEPRECATE
cflags = $(cflags) -D_CRT_NONSTDC_NO_DEPRECATE
cflags = $(cflags) -D_USE_32BIT_TIME_T
ldebug = $(ldebug) /MANIFEST:NO
!ENDIF

# fish test
##FISH_HANG = yes

!IFDEF FISH_HANG
cflags = $(cflags) -DFISH_HANG
!ENDIF

# ***************************************************************************

X = $(EXEDIR)\$(NULL)
O = $(OBJDIR)\$(NULL)

EXECUTABLES = \
    $(X)cckdcdsk.exe \
    $(X)cckdcomp.exe \
    $(X)cckddiag.exe \
    $(X)cckdswap.exe \
    $(X)dasdcat.exe  \
    $(X)dasdconv.exe \
    $(X)dasdcopy.exe \
    $(X)dasdinit.exe \
    $(X)dasdisup.exe \
    $(X)dasdload.exe \
    $(X)dasdls.exe   \
    $(X)dasdpdsu.exe \
    $(X)dasdseq.exe  \
    $(X)dmap2hrc.exe \
    $(X)herclin.exe  \
    $(X)hercules.exe \
    $(X)hetget.exe   \
    $(X)hetinit.exe  \
    $(X)hetmap.exe   \
    $(X)hetupd.exe   \
    $(X)tapecopy.exe \
    $(X)tapemap.exe  \
    $(X)tapesplt.exe

all: allzlib alllibbz2

clean:
    del /f /q $(OBJDIR)\*.*
    del /f /q $(EXEDIR)\*.*
    del /f /q $(PDBDIR)\*.*
    del /f /q $(MAPDIR)\*.*

$(OBJDIR):
    if not exist "$(OBJDIR)\$(NULL)" mkdir $(OBJDIR)

$(EXEDIR):
    if not exist "$(EXEDIR)\$(NULL)" mkdir $(EXEDIR)

$(PDBDIR):
    if not exist "$(PDBDIR)\$(NULL)" mkdir $(PDBDIR)

$(MAPDIR):
    if not exist "$(MAPDIR)\$(NULL)" mkdir $(MAPDIR)

!IFNDEF MAX_CPU_ENGINES
MAX_CPU_ENGINES = 2
!ENDIF

# Starting values...

cflags = $(cflags) /D_MSVC_ /DVERSION=$(VERSION) /DMAX_CPU_ENGINES=$(MAX_CPU_ENGINES)

# user32.lib for the MessageBeep and MessageBox functions
LIBS = user32.lib

# The following line makes all warnings into errors
cflags = $(cflags) /WX

!IFDEF ZLIB_DIR
ZLIB_DLL = $(ZLIB_DIR)\zlib1.dll
ZLIB_LIB = $(ZLIB_DIR)/lib/zdll.lib
ZLIB_INC = $(ZLIB_DIR)/include
LIBS     = $(LIBS) "$(ZLIB_LIB)"
cflags   = $(cflags) /DHAVE_LIBZ /DHAVE_ZLIB_H /I"$(ZLIB_INC)"
!ENDIF

!IFDEF BZIP2_DIR
BZIP2_DLL = $(BZIP2_DIR)\libbz2.dll
BZIP2_LIB = $(BZIP2_DIR)/libbz2.lib
BZIP2_INC = $(BZIP2_DIR)
LIBS     = $(LIBS) "$(BZIP2_LIB)"
cflags   = $(cflags) /DHAVE_BZLIB_H /I"$(BZIP2_INC)"
!ENDIF

# PRERELEASE Flag support

!IFDEF PRERELEASE
PREREL = -D PRERELEASE=1
!ELSE
PREREL =
!ENDIF

linkexe = $(link) -nologo $(ldebug) $(conlflags) $(O)build_pch.obj $** $(LIBS) -out:$@ $(conlibsmt) $(MAPFILE)

$(O)hercver.res: hercver.rc
    $(rc) $(rcflags) $(rcvars) -fo $(O)hercver.res -D VERSION=$(VERSION) -D V1=$(V1) -D V2=$(V2) -D V3=$(V3) -D V4=$(V4) $(PREREL) hercver.rc

$(O)build_pch.pch: build_pch.c
    $(cc) $(cdebug) $(cflags) /Fp"$(OBJDIR)\\build_pch.pch" /Yc"hstdinc.h" $(cvarsmt) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" $**

.c{$(OBJDIR)}.obj::
    $(cc) $(cdebug) $(cflags) /Fp"$(OBJDIR)\\build_pch.pch" /Yu"hstdinc.h" $(cvarsmt) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" $<

{crypto}.c{$(OBJDIR)}.obj::
    $(cc) $(cdebug) $(cflags) /Icrypto /I. /Fp"$(OBJDIR)\\build_pch.pch" /Yu"hstdinc.h" $(cvarsmt) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" $<

#
# No precompiled headers for these ones.. Sorry!
#

$(O)getopt.obj: getopt.c
    $(cc) $(cdebug) $(cflags) $(cvarsmt) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" getopt.c

$(O)herclin.obj: herclin.c
    $(cc) $(cdebug) $(cflags) $(cvarsmt) /Fo"$(OBJDIR)\\" /Fd"$(OBJDIR)\\" herclin.c

{$(OBJDIR)}.obj{$(EXEDIR)}.exe:
    $(linkexe)

# -------------------------------------------------------------
# Define what object code goes into each individual executable

dasdutil_OBJ = \
    $(O)cache.obj    \
    $(O)cckddasd.obj \
    $(O)cckdutil.obj \
    $(O)ckddasd.obj  \
    $(O)codepage.obj \
    $(O)dasdtab.obj  \
    $(O)dasdutil.obj \
    $(O)fbadasd.obj  \
    $(O)fthreads.obj \
    $(O)hostinfo.obj \
    $(O)hscutl.obj   \
    $(O)hsys.obj     \
    $(O)logmsg2.obj  \
    $(O)pttrace.obj  \
    $(O)shared.obj   \
    $(O)version.obj  \
    $(O)w32util.obj

tapeutil_OBJ = \
    $(O)codepage.obj \
    $(O)fthreads.obj \
    $(O)hostinfo.obj \
    $(O)hscutl.obj   \
    $(O)hsys.obj     \
    $(O)logmsg2.obj  \
    $(O)pttrace.obj  \
    $(O)version.obj  \
    $(O)w32stape.obj \
    $(O)w32util.obj

cckdutil_OBJ = \
    $(O)cckdutil.obj \
    $(O)dasdtab.obj  \
    $(O)fthreads.obj \
    $(O)hostinfo.obj \
    $(O)hscutl.obj   \
    $(O)hsys.obj     \
    $(O)logmsg2.obj  \
    $(O)pttrace.obj  \
    $(O)version.obj  \
    $(O)w32util.obj

hetlib_OBJ = \
    $(O)codepage.obj \
    $(O)fthreads.obj \
    $(O)getopt.obj   \
    $(O)hetlib.obj   \
    $(O)hostinfo.obj \
    $(O)hscutl.obj   \
    $(O)hsys.obj     \
    $(O)logmsg2.obj  \
    $(O)pttrace.obj  \
    $(O)sllib.obj    \
    $(O)version.obj  \
    $(O)w32util.obj

hostinfo_OBJ = \
    $(O)fthreads.obj \
    $(O)hostinfo.obj \
    $(O)hscutl.obj   \
    $(O)hsys.obj     \
    $(O)logmsg2.obj  \
    $(O)pttrace.obj  \
    $(O)version.obj  \
    $(O)w32util.obj

hercules_OBJ = \
    $(O)assist.obj    \
    $(O)bldcfg.obj    \
    $(O)cgibin.obj    \
    $(O)channel.obj   \
    $(O)chsc.obj      \
    $(O)cmpsc.obj     \
    $(O)codepage.obj  \
    $(O)config.obj    \
    $(O)control.obj   \
    $(O)cpu.obj       \
    $(O)crypto.obj    \
    $(O)dat.obj       \
    $(O)decimal.obj   \
    $(O)diagmssf.obj  \
    $(O)diagnose.obj  \
    $(O)ecpsvm.obj    \
    $(O)esame.obj     \
    $(O)external.obj  \
    $(O)fillfnam.obj  \
    $(O)float.obj     \
    $(O)fthreads.obj  \
    $(O)general1.obj  \
    $(O)general2.obj  \
    $(O)getopt.obj    \
    $(O)hconsole.obj  \
    $(O)hdl.obj       \
    $(O)hdlmain.obj   \
    $(O)history.obj   \
    $(O)hostinfo.obj  \
    $(O)hsccmd.obj    \
    $(O)hscmisc.obj   \
    $(O)hscutl.obj    \
    $(O)hscutl2.obj   \
    $(O)hsys.obj      \
    $(O)httpserv.obj  \
    $(O)ieee.obj      \
    $(O)impl.obj      \
    $(O)io.obj        \
    $(O)ipl.obj       \
    $(O)loadparm.obj  \
    $(O)logger.obj    \
    $(O)logmsg.obj    \
    $(O)machchk.obj   \
    $(O)memrchr.obj   \
    $(O)opcode.obj    \
    $(O)panel.obj     \
    $(O)parser.obj    \
    $(O)plo.obj       \
    $(O)pttrace.obj   \
    $(O)qdio.obj      \
    $(O)service.obj   \
    $(O)sie.obj       \
    $(O)sr.obj        \
    $(O)stack.obj     \
    $(O)strsignal.obj \
    $(O)timer.obj     \
    $(O)trace.obj     \
    $(O)vector.obj    \
    $(O)version.obj   \
    $(O)vm.obj        \
    $(O)vstore.obj    \
    $(O)w32util.obj   \
    $(O)xstore.obj

devhandl_OBJ = \
    $(O)cache.obj    \
    $(O)cardpch.obj  \
    $(O)cardrdr.obj  \
    $(O)cckddasd.obj \
    $(O)cckdutil.obj \
    $(O)ckddasd.obj  \
    $(O)commadpt.obj \
    $(O)console.obj  \
    $(O)ctc_ctci.obj \
    $(O)ctc_lcs.obj  \
    $(O)ctcadpt.obj  \
    $(O)dasdtab.obj  \
    $(O)fbadasd.obj  \
    $(O)hetlib.obj   \
    $(O)printer.obj  \
    $(O)scsitape.obj \
    $(O)shared.obj   \
    $(O)sockdev.obj  \
    $(O)tapedev.obj  \
    $(O)tuntap.obj   \
    $(O)w32chan.obj  \
    $(O)w32ctca.obj  \
    $(O)w32stape.obj

# -------------------------------------------------------------
# Main product executables

$(X)hercules.exe: $(O)bootstrap.obj $(hercules_OBJ) $(devhandl_OBJ) $(O)hercver.res
    $(linkexe)

$(X)herclin.exe:  $(O)herclin.obj $(hercules_OBJ) $(devhandl_OBJ) $(O)hercver.res
    $(linkexe)

# -------------------------------------------------------------
# System utilities

$(X)dmap2hrc.exe: $(O)$(@B).obj $(hostinfo_OBJ) $(O)hercver.res

# -------------------------------------------------------------
# Dasd utilities

$(X)cckdcdsk.exe: $(O)$(@B).obj $(cckdutil_OBJ) $(O)hercver.res

$(X)cckdcomp.exe: $(O)$(@B).obj $(cckdutil_OBJ) $(O)hercver.res

$(X)cckddiag.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)cckdswap.exe: $(O)$(@B).obj $(cckdutil_OBJ) $(O)hercver.res

$(X)dasdinit.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdisup.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdload.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdconv.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdcopy.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdls.exe:   $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdcat.exe:  $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdpdsu.exe: $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

$(X)dasdseq.exe:  $(O)$(@B).obj $(dasdutil_OBJ) $(O)hercver.res

# -------------------------------------------------------------
# Tape utilities

$(X)hetget.exe:   $(O)$(@B).obj $(hetlib_OBJ) $(O)hercver.res

$(X)hetinit.exe:  $(O)$(@B).obj $(hetlib_OBJ) $(O)hercver.res

$(X)hetmap.exe:   $(O)$(@B).obj $(hetlib_OBJ) $(O)hercver.res

$(X)hetupd.exe:   $(O)$(@B).obj $(hetlib_OBJ) $(O)hercver.res

$(X)tapecopy.exe: $(O)$(@B).obj $(tapeutil_OBJ) $(O)hercver.res

$(X)tapemap.exe:  $(O)$(@B).obj $(tapeutil_OBJ) $(O)hercver.res

$(X)tapesplt.exe: $(O)$(@B).obj $(tapeutil_OBJ) $(O)hercver.res

# -------------------------------------------------------------

!IFDEF ZLIB_DIR

$(X)zlib1.dll:
    XCOPY "$(ZLIB_DLL)" $(X) /V /C /F /H /R /K /O /X /Y

allzlib: $(OBJDIR) $(EXEDIR) $(PDBDIR) $(MAPDIR) $(O)build_pch.pch \
    $(EXECUTABLES) \
    $(X)zlib1.dll

!ELSE
allzlib: $(OBJDIR) $(EXEDIR) $(PDBDIR) $(MAPDIR) $(O)build_pch.pch \
    $(EXECUTABLES)

!ENDIF

# -------------------------------------------------------------

!IFDEF BZIP2_DIR

$(X)libbz2.dll:
    XCOPY "$(BZIP2_DLL)" $(X) /V /C /F /H /R /K /O /X /Y

alllibbz2: $(OBJDIR) $(EXEDIR) $(PDBDIR) $(MAPDIR) $(O)build_pch.pch \
    $(EXECUTABLES) \
    $(X)libbz2.dll

!ELSE
alllibbz2: $(OBJDIR) $(EXEDIR) $(PDBDIR) $(MAPDIR) $(O)build_pch.pch \
    $(EXECUTABLES)

!ENDIF

# -------------------------------------------------------------
